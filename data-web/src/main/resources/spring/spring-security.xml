<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-4.0.xsd">
  <!--  <http access-denied-page = "/accessDenied.jsp">        &lt;!&ndash; 访问拒绝页面 &ndash;&gt;
        <form-login login-page="/login.html"/>   &lt;!&ndash; 定义登陆界面 &ndash;&gt;
        <intercept-url pattern="/login.html" filters="none"/>
        <session-management>
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>  &lt;!&ndash; 用户最大登录数设置为1 ，超过则引发异常 &ndash;&gt;
        </session-management>
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>  &lt;!&ndash; 自定义FILTER ,FilterSecurityInterceptor 负责授权&ndash;&gt;
    </http>
    &lt;!&ndash; myFilter &ndash;&gt;
    <beans:bean id = "myFilter" class = "com.qbt.spring.security.MyFilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref ="authenticationManager"></beans:property>  &lt;!&ndash; 登陆验证 ，验证你的用户名密码噼里啪啦&ndash;&gt;
        <beans:property name="securityMetadataSource" ref = "securityMetadataSource"></beans:property>  &lt;!&ndash; 资源数据源的定义 ，神马权限对应神马资源 噼里啪啦&ndash;&gt;
        <beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean"></beans:property>  &lt;!&ndash; 访问决策 有没有权限访问资源 噼里啪啦&ndash;&gt;
    </beans:bean>

    &lt;!&ndash; 验证配置，认证管理器，实现UserDetailService接口 &ndash;&gt;
    &lt;!&ndash; authenticationManager 可以有多个provider提供信息，我们用myUserDetailService获取信息 &ndash;&gt;
    &lt;!&ndash; Spring Security中进行身份验证的是AuthenticationManager接口，ProviderManager是它的一个默认实现，
        但它并不用来处理身份认证，而是委托给配置好的AuthenticationProvider，每个AuthenticationProvider会轮流检查身份认证。
        检查后或者返回Authentication对象或者抛出异常 &ndash;&gt;
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="myUserDetailService"></authentication-provider>
    </authentication-manager>

    &lt;!&ndash; 获取user数据，可以从数据库中获取用户密码，角色等！ &ndash;&gt;
    <beans:bean id = "myUserDetailService" class = "com.qbt.spring.security.MyUserDetailService"></beans:bean>

    &lt;!&ndash; 访问决策器，决定用户的角色，访问的权限 &ndash;&gt;
    <beans:bean id = "myAccessDecisionManagerBean" class = "com.qbt.spring.security.MyAccessDecisionManager"></beans:bean>

    &lt;!&ndash; 资源数据源的定义 什么资源对应什么权限，或者什么资源能被什么角色访问&ndash;&gt;
    <beans:bean id = "securityMetadataSource" class = "com.qbt.spring.security.MyInvocationSecurityMetadataSource"></beans:bean>-->

</beans:beans>